# For Ruby projects, the rules of thumb are:

# One class per file. Every time you create a new class, you should create a new file for it to live in.
# It is convention to put all your Ruby files into a lib directory. 
project_name
├── lib
│   └── lovely_file_of_yours.rb
└── main.rb


# ..........Making Use of Multiple Files........
├── lib
│   ├── sort
│   │   ├── bogo_sort.rb
│   │   ├── bubble_sort.rb
│   │   └── merge_sort.rb
│   └── sort.rb
└── main.rb

# require_relative vs require:

# require_relative
# require_relative is used to load files relative to the file that calls it. 
# You're in the root of the project, the directory that holds main.rb

# main.rb
require_relative 'lib/sort'
# lib/sort.rb
require_relative 'sort/bubble_sort'
require_relative 'sort/bogo_sort'
require_relative 'sort/merge_sort'



# require
# require is used for libraries that are outside your project (e.g., gems). It searches for files in directories listed in $LOAD_PATH, including installed gems and Ruby’s standard library. 


# ..........GEMS AND YOU..........
# Gems are packages of Ruby code that can be shared and reused. They can be libraries, applications, or anything else that can be packaged up and shared with others.
# Some of those gems are part of the Ruby standard library, but most require installing independently.
# Gems are installed using the RubyGems package manager, which is included with Ruby.
# Many gems depend upon other gems, and sometimes, the versions they depend on differ.
# Installing a gem is as simple as running the command:

# gem install <gem_name>

# For example, to install the 'colorize' gem, you would run:

# gem install colorize

# To use a gem in your project, you need to require it in your Ruby file.
# For example, to use the 'colorize' gem, you would add the following line to your Ruby file:

# require 'colorize'


# gem install is for others who would like to use my code


# ..........Bundler..........
# Bundler is a gem that manages gem dependencies for Ruby projects. 
# It allows you to specify which gems your project depends on and ensures that the correct versions are installed.
# As for others, Bundler allows them to take that declaration, a simple file called "#Gemfile" and use it to install those gems in a quick "bundle install".
# Since gem installs are global, you need a way to run only those particular gem versions that are declared in the Gemfile. You can do that by using "bundle exec" followed by a command you want to execute - most likely "bundle exec ruby foo.rb".

# Bundler commands:

# bundle init: Creates a Gemfile for managing dependencies.
# bundle add colorize: Adds the colorize gem to the Gemfile and installs it.

# the Gemfile has information on where to get the gems from and what gems are required.
# Gemfile.lock has the versions of the gems that were installed.
# The Gemfile.lock file is automatically generated by Bundler when you run bundle install.


=begin
SCode Ruby LSP (Language Server Protocol):

The Ruby LSP extension for Visual Studio Code can also detect the .ruby-version file and adjust its behavior based on the specified Ruby version.

This is useful because some Ruby extensions (like RuboCop) may require a specific version of Ruby to work correctly, and by reading .ruby-version, VSCode can ensure that the right version of Ruby is being used.

RuboCop:

RuboCop is a static code analyzer for Ruby that enforces style and coding standards. It may need a specific version of Ruby to work properly, and with the .ruby-version file in place, RuboCop will run against the correct version.

This can be especially helpful when working on teams, as it ensures everyone is using the same version of Ruby and following the same code style rules.
=end